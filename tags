!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/chrleroy/Desktop/repos/Github/42_Mini_RT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(MLX_DIR)/libmlx.a	Makefile	/^$(MLX_DIR)\/libmlx.a:$/;"	t
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
$(NAME)	minilibx-linux/Makefile.mk	/^$(NAME)	: $(OBJ)$/;"	t
$(NAME)	minilibx-linux/test/Makefile.mk	/^$(NAME): $(OBJ)$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(SRC_DIR)\/%.c$/;"	t
$(OBJ_DIR)/%.o	minilibx-linux/Makefile.mk	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
*.old	.vscode/settings.json	/^        "*.old": "c"$/;"	s	object:files.associations
AUTHOR	minilibx-linux/man/man1/mlx.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man1/mlx_loop.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man1/mlx_new_image.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man1/mlx_new_window.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man3/mlx.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man3/mlx_loop.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man3/mlx_new_image.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man3/mlx_new_window.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
BLUE	Makefile	/^BLUE = \\033[0;34m$/;"	m
BVH_STACK_SIZE	includes/minirt.h	/^# define BVH_STACK_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	minilibx-linux/Makefile.mk	/^	CC = clang$/;"	m
CC	minilibx-linux/Makefile.mk	/^CC	= gcc$/;"	m
CC	minilibx-linux/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	minilibx-linux/test/Makefile.mk	/^	CC = clang$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -O3 -march=native -funroll-loops -flto -ffast-math -fno-math-errn/;"	m
CFLAGS	minilibx-linux/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	minilibx-linux/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
COLOR	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
COLOR	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
CONE	includes/minirt.h	/^# define CONE /;"	d
CUBE	includes/minirt.h	/^# define CUBE /;"	d
CYLINDER	includes/minirt.h	/^# define CYLINDER /;"	d
DESCRIPTION	minilibx-linux/man/man1/mlx.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man1/mlx_loop.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man1/mlx_new_image.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man1/mlx_new_window.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man3/mlx.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man3/mlx_loop.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man3/mlx_new_image.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man3/mlx_new_window.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
ENV_DISPLAY	minilibx-linux/mlx_int.h	/^# define ENV_DISPLAY /;"	d
EOF	minilibx-linux/configure	/^cat <<EOF$/;"	h
EPSILON	includes/minirt.h	/^# define EPSILON /;"	d
ERROR_ARGS	includes/minirt.h	/^	ERROR_ARGS = 1,$/;"	e	enum:e_error
ERROR_FILE	includes/minirt.h	/^	ERROR_FILE = 2,$/;"	e	enum:e_error
ERROR_MEMORY	includes/minirt.h	/^	ERROR_MEMORY = 4,$/;"	e	enum:e_error
ERROR_MLX	includes/minirt.h	/^	ERROR_MLX = 5$/;"	e	enum:e_error
ERROR_NONE	includes/minirt.h	/^	ERROR_NONE = 0,$/;"	e	enum:e_error
ERROR_PARSE	includes/minirt.h	/^	ERROR_PARSE = 3,$/;"	e	enum:e_error
ERR_NO_TRUECOLOR	minilibx-linux/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
GOING	minilibx-linux/man/man1/mlx_loop.1	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GOING	minilibx-linux/man/man3/mlx_loop.3	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GREEN	Makefile	/^GREEN = \\033[0;32m$/;"	m
GREEN_OFFSET	includes/minirt.h	/^# define GREEN_OFFSET /;"	d
IM1_SX	minilibx-linux/test/main.c	/^#define	IM1_SX	/;"	d	file:
IM1_SY	minilibx-linux/test/main.c	/^#define	IM1_SY	/;"	d	file:
IM3_SX	minilibx-linux/test/main.c	/^#define	IM3_SX	/;"	d	file:
IM3_SY	minilibx-linux/test/main.c	/^#define	IM3_SY	/;"	d	file:
INC	minilibx-linux/Makefile.mk	/^INC	=%%%%$/;"	m
INC	minilibx-linux/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	minilibx-linux/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INCLUDE	minilibx-linux/man/man1/mlx.1	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDE	minilibx-linux/man/man3/mlx.3	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDES	Makefile	/^INCLUDES = -I$(INC_DIR) -I$(MLX_DIR)$/;"	m
INC_DIR	Makefile	/^INC_DIR = includes$/;"	m
KEY_A	includes/minirt.h	/^# define KEY_A /;"	d
KEY_D	includes/minirt.h	/^# define KEY_D /;"	d
KEY_DOWN	includes/minirt.h	/^# define KEY_DOWN /;"	d
KEY_ESC	includes/minirt.h	/^# define KEY_ESC /;"	d
KEY_LEFT	includes/minirt.h	/^# define KEY_LEFT /;"	d
KEY_RIGHT	includes/minirt.h	/^# define KEY_RIGHT /;"	d
KEY_S	includes/minirt.h	/^# define KEY_S /;"	d
KEY_UP	includes/minirt.h	/^# define KEY_UP /;"	d
KEY_W	includes/minirt.h	/^# define KEY_W /;"	d
LFLAGS	minilibx-linux/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIBRARY	minilibx-linux/man/man1/mlx.1	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LIBRARY	minilibx-linux/man/man3/mlx.3	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LIBS	Makefile	/^LIBS = -L$(MLX_DIR) -lmlx -lXext -lX11 -lm$/;"	m
LINKING	minilibx-linux/man/man1/mlx.1	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LINKING	minilibx-linux/man/man3/mlx.3	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LOCALHOST	minilibx-linux/mlx_int.h	/^# define LOCALHOST /;"	d
MAX_DEPTH	includes/minirt.h	/^# define MAX_DEPTH /;"	d
MAX_OBJECTS_PER_LEAF	includes/minirt.h	/^# define MAX_OBJECTS_PER_LEAF /;"	d
MINIRT_H	includes/minirt.h	/^# define MINIRT_H$/;"	d
MLX_DIR	Makefile	/^MLX_DIR = minilibx-linux$/;"	m
MLX_H	minilibx-linux/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	minilibx-linux/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	minilibx-linux/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	minilibx-linux/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	minilibx-linux/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	minilibx-linux/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MiniLibX	minilibx-linux/man/man1/mlx.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man1/mlx_loop.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man1/mlx_new_image.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man1/mlx_new_window.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man1/mlx_pixel_put.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man3/mlx.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man3/mlx_loop.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man3/mlx_new_image.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man3/mlx_new_window.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx-linux/man/man3/mlx_pixel_put.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
NAME	Makefile	/^NAME = miniRT$/;"	m
NAME	minilibx-linux/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	minilibx-linux/man/man1/mlx.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man1/mlx_loop.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man1/mlx_new_image.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man1/mlx_new_window.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man3/mlx.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man3/mlx_loop.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man3/mlx_new_image.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man3/mlx_new_window.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx-linux/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	minilibx-linux/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NC	Makefile	/^NC = \\033[0m$/;"	m
OBJ	minilibx-linux/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	minilibx-linux/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:$(SRC_DIR)\/%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
OBJ_DIR	minilibx-linux/Makefile.mk	/^OBJ_DIR = obj$/;"	m
PFLAGS	Makefile	/^PFLAGS = -pg$/;"	m
PLANE	includes/minirt.h	/^# define PLANE /;"	d
RED	Makefile	/^RED = \\033[0;31m$/;"	m
RED_OFFSET	includes/minirt.h	/^# define RED_OFFSET /;"	d
RETURN	minilibx-linux/man/man1/mlx.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/man/man1/mlx_new_image.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/man/man1/mlx_new_window.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/man/man3/mlx.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/man/man3/mlx_new_image.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/man/man3/mlx_new_window.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx-linux/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
SEE	minilibx-linux/man/man1/mlx.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man1/mlx_loop.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man1/mlx_new_image.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man1/mlx_new_window.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man3/mlx.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man3/mlx_loop.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man3/mlx_new_image.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man3/mlx_new_window.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SPHERE	includes/minirt.h	/^# define SPHERE /;"	d
SRC	minilibx-linux/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	minilibx-linux/test/Makefile.mk	/^SRC = main.c$/;"	m
SRCS	Makefile	/^SRCS = $(wildcard $(SRC_DIR)\/*.c) $(wildcard $(SRC_DIR)\/**\/*.c)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
STORING	minilibx-linux/man/man1/mlx_new_image.1	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
STORING	minilibx-linux/man/man3/mlx_new_image.3	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man1/mlx.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man1/mlx_loop.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man1/mlx_new_image.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man1/mlx_new_window.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man1/mlx_pixel_put.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man3/mlx.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man3/mlx_loop.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man3/mlx_new_image.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man3/mlx_new_window.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx-linux/man/man3/mlx_pixel_put.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
TEST_EPSILON	tests/test_camera_ray.c	/^#define TEST_EPSILON /;"	d	file:
TEST_EPSILON	tests/test_intersections.c	/^#define TEST_EPSILON /;"	d	file:
TEST_EPSILON	tests/test_parsing_comprehensive.c	/^#define TEST_EPSILON /;"	d	file:
TEST_EPSILON	tests/test_ray.c	/^#define TEST_EPSILON /;"	d	file:
TEST_EPSILON	tests/test_vector.c	/^#define TEST_EPSILON /;"	d	file:
TEST_EPSILON	tests/test_vector_raytracing.c	/^#define TEST_EPSILON /;"	d	file:
UNAME	minilibx-linux/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	minilibx-linux/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
WARN_SHM_ATTACH	minilibx-linux/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WIN1_SX	minilibx-linux/test/main.c	/^#define	WIN1_SX	/;"	d	file:
WIN1_SY	minilibx-linux/test/main.c	/^#define	WIN1_SY	/;"	d	file:
X-WINDOW	minilibx-linux/man/man1/mlx.1	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	minilibx-linux/man/man1/mlx_loop.1	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
X-WINDOW	minilibx-linux/man/man3/mlx.3	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	minilibx-linux/man/man3/mlx_loop.3	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
XPM	minilibx-linux/man/man1/mlx_new_image.1	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
XPM	minilibx-linux/man/man3/mlx_new_image.3	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
X_ShmAttach	minilibx-linux/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
YELLOW	Makefile	/^YELLOW = \\033[0;33m$/;"	m
a	includes/minirt.h	/^	double	a;$/;"	m	struct:s_cone_params	typeref:typename:double
a	includes/minirt.h	/^	double	a;$/;"	m	struct:s_cylinder_params	typeref:typename:double
aabb_surface	src/utils/sah.c	/^double	aabb_surface(t_aabb a)$/;"	f	typeref:typename:double
aabb_union	src/utils/bvh.c	/^t_aabb	aabb_union(t_aabb a, t_aabb b)$/;"	f	typeref:typename:t_aabb
add_light_to_scene	src/parsing/parse_lights.c	/^static void	add_light_to_scene(t_scene *scene, t_light *light)$/;"	f	typeref:typename:void	file:
add_object_to_scene	src/parsing/parse_objects.c	/^void	add_object_to_scene(t_scene *scene, t_object *object)$/;"	f	typeref:typename:void
all	Makefile	/^all: $(MLX_DIR)\/libmlx.a $(NAME)$/;"	t
all	minilibx-linux/Makefile	/^all	: do_configure$/;"	t
all	minilibx-linux/Makefile.mk	/^all	: $(NAME)$/;"	t
all	minilibx-linux/test/Makefile.mk	/^all: $(NAME)$/;"	t
allocate_bounds	src/utils/sah.c	/^static void	allocate_bounds(t_aabb **left_bounds, t_aabb **right_bounds, \\$/;"	f	typeref:typename:void	file:
ambient	includes/minirt.h	/^	t_color		ambient;$/;"	m	struct:s_scene	typeref:typename:t_color
ambient_ratio	includes/minirt.h	/^	double		ambient_ratio;$/;"	m	struct:s_scene	typeref:typename:double
analyze	Makefile	/^analyze:$/;"	t
angle	includes/minirt.h	/^	double			angle;$/;"	m	struct:s_object	typeref:typename:double
at_exit	minilibx-linux/test/run_tests.sh	/^at_exit() {$/;"	f
axis	includes/minirt.h	/^	t_vec3			axis;$/;"	m	struct:s_object	typeref:typename:t_vec3
b	includes/minirt.h	/^	double	b;$/;"	m	struct:s_cone_params	typeref:typename:double
b	includes/minirt.h	/^	double	b;$/;"	m	struct:s_cylinder_params	typeref:typename:double
b	includes/minirt.h	/^	int	b;$/;"	m	struct:s_color	typeref:typename:int
bits_per_pixel	includes/minirt.h	/^	int		bits_per_pixel;$/;"	m	struct:s_mlx	typeref:typename:int
bounds	includes/minirt.h	/^    t_aabb              bounds;$/;"	m	struct:s_bvh_node	typeref:typename:t_aabb
bounds	tests/test_cleanup_only.c	/^    t_aabb bounds;$/;"	m	struct:s_bvh_node	typeref:typename:t_aabb	file:
box	includes/minirt.h	/^	t_aabb	box;$/;"	m	struct:s_aabb_query	typeref:typename:t_aabb
bpp	minilibx-linux/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp1	minilibx-linux/test/main.c	/^int	bpp1;$/;"	v	typeref:typename:int
bpp2	minilibx-linux/test/main.c	/^int	bpp2;$/;"	v	typeref:typename:int
bpp3	minilibx-linux/test/main.c	/^int	bpp3;$/;"	v	typeref:typename:int
bpp4	minilibx-linux/test/main.c	/^int	bpp4;$/;"	v	typeref:typename:int
build_bvh	src/utils/bvh.c	/^t_bvh_node	*build_bvh(t_scene *scene)$/;"	f	typeref:typename:t_bvh_node *
build_bvh_recursive	src/utils/bvh.c	/^t_bvh_node	*build_bvh_recursive(t_object **objects, int count)$/;"	f	typeref:typename:t_bvh_node *
bvh_root	includes/minirt.h	/^	t_bvh_node	*bvh_root;$/;"	m	struct:s_scene	typeref:typename:t_bvh_node *
c	includes/minirt.h	/^	double	c;$/;"	m	struct:s_cone_params	typeref:typename:double
c	includes/minirt.h	/^	double	c;$/;"	m	struct:s_cylinder_params	typeref:typename:double
calculate_ambient_lighting	src/rendering/lighting.c	/^static t_color	calculate_ambient_lighting(t_scene *scene, t_material *material)$/;"	f	typeref:typename:t_color	file:
calculate_background_color	src/rendering/raytracer_utils.c	/^t_color	calculate_background_color(t_ray ray)$/;"	f	typeref:typename:t_color
calculate_cone_coefficients	src/math/intersect_cone.c	/^static t_cone_params	calculate_cone_coefficients(t_ray ray, t_object *cone)$/;"	f	typeref:typename:t_cone_params	file:
calculate_cylinder_params	src/math/intersect_cylinder.c	/^static t_cylinder_params	calculate_cylinder_params(t_ray ray,$/;"	f	typeref:typename:t_cylinder_params	file:
calculate_diffuse_lighting	src/rendering/lighting.c	/^static t_color	calculate_diffuse_lighting(t_vec3 point, t_vec3 normal, t_scene *scene, t_materia/;"	f	typeref:typename:t_color	file:
calculate_fresnel	src/rendering/reflections.c	/^static double	calculate_fresnel(double cos_i, double n1, double n2)$/;"	f	typeref:typename:double	file:
calculate_hit_color	src/rendering/raycast_optimized.c	/^t_color	calculate_hit_color(t_ray ray, t_hit *hit, t_scene *scene, int depth)$/;"	f	typeref:typename:t_color
calculate_lighting	src/rendering/lighting.c	/^t_color	calculate_lighting(t_vec3 point, t_vec3 normal, t_scene *scene, t_material *material)$/;"	f	typeref:typename:t_color
calculate_pixel_world_position	src/rendering/raytracer_utils.c	/^t_vec3	calculate_pixel_world_position(t_camera *c, double u, double v, double hw, double hh)$/;"	f	typeref:typename:t_vec3
calculate_reflection	src/rendering/reflections.c	/^t_color	calculate_reflection(t_ray ray, t_hit *hit, t_scene *scene, int depth)$/;"	f	typeref:typename:t_color
calculate_refraction	src/rendering/reflections.c	/^t_color	calculate_refraction(t_ray ray, t_hit *hit, t_scene *scene, int depth)$/;"	f	typeref:typename:t_color
calculate_refraction_ray	src/rendering/reflections.c	/^static t_vec3	calculate_refraction_ray(t_vec3 incident, t_vec3 normal, double n1, double n2)$/;"	f	typeref:typename:t_vec3	file:
calculate_slab_intersections	src/math/cube_utils.c	/^t_slab_intersections	calculate_slab_intersections(double ray_dir,$/;"	f	typeref:typename:t_slab_intersections
calculate_viewport_dimensions	src/rendering/raytracer_utils.c	/^void	calculate_viewport_dimensions(t_minirt *rt, t_camera *camera,$/;"	f	typeref:typename:void
camera	includes/minirt.h	/^	t_camera	camera;$/;"	m	struct:s_scene	typeref:typename:t_camera
case_internal_node	src/utils/bvh_intersections.c	/^int	case_internal_node(t_bvh_node *node, t_hit *hit, t_ray ray)$/;"	f	typeref:typename:int
case_leaf_node	src/utils/bvh_intersections.c	/^int case_leaf_node(t_bvh_node *node, t_hit *hit, t_ray ray)$/;"	f	typeref:typename:int
check	minilibx-linux/Makefile.mk	/^check: all$/;"	t
check_limits	src/utils/colors1.c	/^static void	check_limits(int *color)$/;"	f	typeref:typename:void	file:
clean	Makefile	/^clean:$/;"	t
clean	minilibx-linux/Makefile	/^clean	:$/;"	t
clean	minilibx-linux/Makefile.mk	/^clean	:$/;"	t
clean	minilibx-linux/configure	/^clean(){$/;"	f
clean	minilibx-linux/test/Makefile.mk	/^clean:$/;"	t
clean_profile	Makefile	/^clean_profile:$/;"	t
cleanup_all	src/utils/error.c	/^void	cleanup_all(t_minirt *rt)$/;"	f	typeref:typename:void
cleanup_bvh	src/utils/bvh.c	/^void	cleanup_bvh(t_bvh_node *node)$/;"	f	typeref:typename:void
cleanup_bvh	tests/test_cleanup_only.c	/^void cleanup_bvh(t_bvh_node *node)$/;"	f	typeref:typename:void
cleanup_light_list	src/utils/cleanup.c	/^void	cleanup_light_list(t_light *lights)$/;"	f	typeref:typename:void
cleanup_mlx	src/graphics/window.c	/^void	cleanup_mlx(t_mlx *mlx)$/;"	f	typeref:typename:void
cleanup_mlx	tests/test_scene_parsers_simple.c	/^void cleanup_mlx(t_mlx *mlx) { (void)mlx; }$/;"	f	typeref:typename:void
cleanup_object_list	src/utils/cleanup.c	/^void	cleanup_object_list(t_object *objects)$/;"	f	typeref:typename:void
cleanup_scene	src/utils/error.c	/^void	cleanup_scene(t_scene *scene)$/;"	f	typeref:typename:void
cleanup_scene_on_error	src/parsing/parse_scene.c	/^static void	cleanup_scene_on_error(t_scene *scene)$/;"	f	typeref:typename:void	file:
cleanup_string_array	src/utils/cleanup.c	/^void	cleanup_string_array(char **array, int count)$/;"	f	typeref:typename:void
cmap	minilibx-linux/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar	typeref:typename:Colormap
col	minilibx-linux/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col	typeref:typename:int
color	includes/minirt.h	/^	t_color			color;$/;"	m	struct:s_light	typeref:typename:t_color
color	includes/minirt.h	/^	t_color	color;$/;"	m	struct:s_material	typeref:typename:t_color
color	minilibx-linux/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name	typeref:typename:int
color_add	src/utils/colors1.c	/^t_color	color_add(t_color a, t_color b)$/;"	f	typeref:typename:t_color
color_blend	src/utils/colors1.c	/^t_color	color_blend(t_color a, t_color b, double ratio)$/;"	f	typeref:typename:t_color
color_clamp	src/utils/colors1.c	/^t_color	color_clamp(t_color color)$/;"	f	typeref:typename:t_color
color_equals	tests/test_parsing_comprehensive.c	/^int	color_equals(t_color a, t_color b)$/;"	f	typeref:typename:int
color_gamma_correct	src/utils/colors.c	/^t_color	color_gamma_correct(t_color color, double gamma)$/;"	f	typeref:typename:t_color
color_linear_to_srgb	src/utils/colors.c	/^t_color	color_linear_to_srgb(t_color color)$/;"	f	typeref:typename:t_color
color_map_1	minilibx-linux/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f	typeref:typename:int
color_map_2	minilibx-linux/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f	typeref:typename:int
color_mult	src/utils/colors1.c	/^t_color	color_mult(t_color color, double scalar)$/;"	f	typeref:typename:t_color
color_new	src/utils/colors.c	/^t_color	color_new(int r, int g, int b)$/;"	f	typeref:typename:t_color
color_to_int	src/graphics/image.c	/^int	color_to_int(t_color color)$/;"	f	typeref:typename:int
count_objects	src/utils/bvh.c	/^int	count_objects(t_object *objects)$/;"	f	typeref:typename:int
count_objects	tests/test_scene_parsers.c	/^int count_objects(t_scene *scene)$/;"	f	typeref:typename:int
count_objects	tests/test_scene_parsers_simple.c	/^int count_objects(t_scene *scene)$/;"	f	typeref:typename:int
create_and_add_cylinder	src/parsing/parse_cylinder.c	/^static int	create_and_add_cylinder(t_scene *scene, t_vec3 pos, t_vec3 axis,$/;"	f	typeref:typename:int	file:
create_cone	src/parsing/parse_cone.c	/^static t_object	*create_cone(t_vec3 pos, t_vec3 axis, double angle,$/;"	f	typeref:typename:t_object *	file:
create_cube	src/parsing/parse_cube.c	/^static t_object	*create_cube(t_vec3 position, double size, t_color color)$/;"	f	typeref:typename:t_object *	file:
create_plane	src/parsing/parse_plane.c	/^static t_object	*create_plane(t_vec3 position, t_vec3 normal, t_color color)$/;"	f	typeref:typename:t_object *	file:
create_sphere	src/parsing/parse_sphere.c	/^static t_object	*create_sphere(t_vec3 position, double diameter, t_color color)$/;"	f	typeref:typename:t_object *	file:
create_test_cylinder	tests/test_intersections.c	/^t_object	create_test_cylinder(t_vec3 center, t_vec3 axis, double radius, double height, t_color /;"	f	typeref:typename:t_object
create_test_plane	tests/test_intersections.c	/^t_object	create_test_plane(t_vec3 point, t_vec3 normal, t_color color)$/;"	f	typeref:typename:t_object
create_test_sphere	tests/test_intersections.c	/^t_object	create_test_sphere(t_vec3 center, double radius, t_color color)$/;"	f	typeref:typename:t_object
data	minilibx-linux/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img	typeref:typename:char *
data1	minilibx-linux/test/main.c	/^char	*data1;$/;"	v	typeref:typename:char *
data2	minilibx-linux/test/main.c	/^char	*data2;$/;"	v	typeref:typename:char *
data3	minilibx-linux/test/main.c	/^char	*data3;$/;"	v	typeref:typename:char *
data4	minilibx-linux/test/main.c	/^char	*data4;$/;"	v	typeref:typename:char *
decrgb	minilibx-linux/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar	typeref:typename:int[6]
depth	minilibx-linux/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar	typeref:typename:int
detect_edge	src/rendering/antialiasing.c	/^static int	detect_edge(t_minirt *rt, int x, int y)$/;"	f	typeref:typename:int	file:
dir	includes/minirt.h	/^	t_vec3	dir;$/;"	m	struct:s_aabb_query	typeref:typename:t_vec3
direction	includes/minirt.h	/^	t_vec3	direction;$/;"	m	struct:s_camera	typeref:typename:t_vec3
direction	includes/minirt.h	/^	t_vec3	direction;$/;"	m	struct:s_ray	typeref:typename:t_vec3
display	minilibx-linux/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar	typeref:typename:Display *
display_image	src/graphics/image.c	/^void	display_image(t_mlx *mlx)$/;"	f	typeref:typename:void
do_configure	minilibx-linux/Makefile	/^do_configure	:$/;"	t
do_flush	minilibx-linux/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar	typeref:typename:int
double_equals	tests/test_camera_ray.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
double_equals	tests/test_intersections.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
double_equals	tests/test_parsing_comprehensive.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
double_equals	tests/test_ray.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
double_equals	tests/test_vector.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
double_equals	tests/test_vector_raytracing.c	/^int	double_equals(double a, double b)$/;"	f	typeref:typename:int
draw_test_pattern	tests/test_visual_mlx.c	/^void	draw_test_pattern(t_mlx *mlx)$/;"	f	typeref:typename:void
e_error	includes/minirt.h	/^typedef enum e_error$/;"	g
end_loop	minilibx-linux/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar	typeref:typename:int
endian	includes/minirt.h	/^	int		endian;$/;"	m	struct:s_mlx	typeref:typename:int
endian1	minilibx-linux/test/main.c	/^int	endian1;$/;"	v	typeref:typename:int
endian2	minilibx-linux/test/main.c	/^int	endian2;$/;"	v	typeref:typename:int
endian3	minilibx-linux/test/main.c	/^int	endian3;$/;"	v	typeref:typename:int
endian4	minilibx-linux/test/main.c	/^int	endian4;$/;"	v	typeref:typename:int
error_exit	src/utils/error1.c	/^void	error_exit(char *message, t_minirt *rt)$/;"	f	typeref:typename:void
exit_success	src/utils/error1.c	/^void	exit_success(t_minirt *rt)$/;"	f	typeref:typename:void
expose_hook	minilibx-linux/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
expose_param	minilibx-linux/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list	typeref:typename:void *
expose_win1	minilibx-linux/test/main.c	/^int	expose_win1(void *p)$/;"	f	typeref:typename:int
expose_win2	minilibx-linux/test/main.c	/^int	expose_win2(void *p)$/;"	f	typeref:typename:int
fclean	Makefile	/^fclean: clean$/;"	t
filename	includes/minirt.h	/^	char	*filename;$/;"	m	struct:s_minirt	typeref:typename:char *
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
fill_bounds	src/utils/sah.c	/^static void	fill_bounds(t_object **objects, int count,$/;"	f	typeref:typename:void	file:
find_sah_split	src/utils/sah.c	/^int	find_sah_split(t_object **objects, int count, int *best_axis, \\$/;"	f	typeref:typename:int
format	minilibx-linux/mlx_int.h	/^	int				format;$/;"	m	struct:s_img	typeref:typename:int
fov	includes/minirt.h	/^	double	fov;$/;"	m	struct:s_camera	typeref:typename:double
free_cone_tokens	src/parsing/parse_cone.c	/^static void	free_cone_tokens(char **tokens)$/;"	f	typeref:typename:void	file:
free_cube_tokens	src/parsing/parse_cube.c	/^static void	free_cube_tokens(char *pos, char *size, char *col)$/;"	f	typeref:typename:void	file:
free_cylinder_tokens	src/parsing/parse_cylinder.c	/^static void	free_cylinder_tokens(char **tokens)$/;"	f	typeref:typename:void	file:
free_plane_tokens	src/parsing/parse_plane.c	/^static void	free_plane_tokens(char *pos, char *norm, char *col)$/;"	f	typeref:typename:void	file:
free_sphere_tokens	src/parsing/parse_sphere.c	/^static void	free_sphere_tokens(char *pos, char *diam, char *col)$/;"	f	typeref:typename:void	file:
g	includes/minirt.h	/^	int	g;$/;"	m	struct:s_color	typeref:typename:int
g_sample_offsets	src/rendering/antialiasing.c	/^static const double g_sample_offsets[4][2] = {$/;"	v	typeref:typename:const double[4][2]	file:
gc	minilibx-linux/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list	typeref:typename:GC
gc	minilibx-linux/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img	typeref:typename:GC
gere_mouse	minilibx-linux/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f	typeref:typename:int
get_axis_value	src/utils/bvh.c	/^static double get_axis_value(t_object *obj, int axis)$/;"	f	typeref:typename:double	file:
get_camera_ray	src/rendering/raytracer.c	/^t_ray	get_camera_ray(t_minirt *rt, t_camera *camera, double u, double v)$/;"	f	typeref:typename:t_ray
get_closest_root	src/math/intersect_sphere.c	/^static double	get_closest_root(double a, double b, double discriminant)$/;"	f	typeref:typename:double	file:
get_cone_discriminant_root	src/math/intersect_cone.c	/^static double	get_cone_discriminant_root(double a, double b,$/;"	f	typeref:typename:double	file:
get_cone_normal	src/math/object_normals.c	/^t_vec3	get_cone_normal(t_vec3 hit_point, t_object *cone)$/;"	f	typeref:typename:t_vec3
get_cone_projections	src/math/cone_utils.c	/^void	get_cone_projections(t_ray ray, t_object *cone, t_vec3 *proj_ray,$/;"	f	typeref:typename:void
get_cube_bounds	src/math/cube_utils.c	/^void	get_cube_bounds(t_object *cube, t_vec3 *cube_min, t_vec3 *cube_max)$/;"	f	typeref:typename:void
get_cube_normal	src/math/normal_utils.c	/^static t_vec3	get_cube_normal(t_vec3 hit_point, t_object *cube)$/;"	f	typeref:typename:t_vec3	file:
get_cylinder_normal	src/math/object_normals.c	/^t_vec3	get_cylinder_normal(t_vec3 hit_point, t_object *cylinder)$/;"	f	typeref:typename:t_vec3
get_cylinder_root	src/math/intersect_cylinder.c	/^static double	get_cylinder_root(double a, double b, double discriminant)$/;"	f	typeref:typename:double	file:
get_next_token	src/parsing/parse_utils.c	/^char	*get_next_token(char **str)$/;"	f	typeref:typename:char *
get_object_bounds	src/utils/bvh.c	/^t_aabb	get_object_bounds(t_object *obj)$/;"	f	typeref:typename:t_aabb
get_object_intersection	src/math/intersections.c	/^static double	get_object_intersection(t_ray ray, t_object *current)$/;"	f	typeref:typename:double	file:
get_object_normal	src/math/normal_utils.c	/^t_vec3	get_object_normal(t_vec3 hit_point, t_object *object)$/;"	f	typeref:typename:t_vec3
get_plane_normal	src/math/object_normals.c	/^t_vec3	get_plane_normal(t_vec3 hit_point, t_object *plane)$/;"	f	typeref:typename:t_vec3
get_sphere_normal	src/math/object_normals.c	/^t_vec3	get_sphere_normal(t_vec3 hit_point, t_object *sphere)$/;"	f	typeref:typename:t_vec3
get_xlib_include_path	minilibx-linux/configure	/^get_xlib_include_path(){$/;"	f
handle_close	src/graphics/events.c	/^int	handle_close(t_minirt *rt)$/;"	f	typeref:typename:int
handle_file_error	src/utils/error1.c	/^void	handle_file_error(char *filename, char *operation, t_minirt *rt)$/;"	f	typeref:typename:void
handle_keypress	src/graphics/events.c	/^int	handle_keypress(int keycode, t_minirt *rt)$/;"	f	typeref:typename:int
handle_loop	src/graphics/events.c	/^int	handle_loop(t_minirt *rt)$/;"	f	typeref:typename:int
handle_malloc_error	src/utils/error1.c	/^void	handle_malloc_error(size_t size, t_minirt *rt)$/;"	f	typeref:typename:void
handle_mouse	src/graphics/events.c	/^int handle_mouse(int keycode, int x, int y, void *param)$/;"	f	typeref:typename:int
handle_parse_error	src/utils/error.c	/^void	handle_parse_error(char *filename, int line_num, char *message, \\$/;"	f	typeref:typename:void
height	includes/minirt.h	/^	double			height;$/;"	m	struct:s_object	typeref:typename:double
height	includes/minirt.h	/^	int		height;$/;"	m	struct:s_mlx	typeref:typename:int
height	minilibx-linux/mlx_int.h	/^	int				height;$/;"	m	struct:s_img	typeref:typename:int
hook	minilibx-linux/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list	typeref:typename:int (*)()
hooks	minilibx-linux/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list	typeref:typename:t_event_list[]
im1	minilibx-linux/test/main.c	/^void    *im1;$/;"	v	typeref:typename:void *
im2	minilibx-linux/test/main.c	/^void	*im2;$/;"	v	typeref:typename:void *
im3	minilibx-linux/test/main.c	/^void	*im3;$/;"	v	typeref:typename:void *
im4	minilibx-linux/test/main.c	/^void	*im4;$/;"	v	typeref:typename:void *
image	minilibx-linux/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img	typeref:typename:XImage *
img_data	includes/minirt.h	/^	char	*img_data;$/;"	m	struct:s_mlx	typeref:typename:char *
img_ptr	includes/minirt.h	/^	void	*img_ptr;$/;"	m	struct:s_mlx	typeref:typename:void *
init_cone_material	src/parsing/parse_cone.c	/^static void	init_cone_material(t_object *cone)$/;"	f	typeref:typename:void	file:
init_cube_material	src/parsing/parse_cube.c	/^static void	init_cube_material(t_object *cube)$/;"	f	typeref:typename:void	file:
init_cylinder_material	src/parsing/parse_cylinder.c	/^static void	init_cylinder_material(t_object *cylinder)$/;"	f	typeref:typename:void	file:
init_minirt	src/main.c	/^static int	init_minirt(t_minirt *rt, char *filename)$/;"	f	typeref:typename:int	file:
init_mlx	src/graphics/window.c	/^int	init_mlx(t_mlx *mlx)$/;"	f	typeref:typename:int
init_mlx_context	src/main.c	/^static void	init_mlx_context(t_mlx *mlx)$/;"	f	typeref:typename:void	file:
init_plane_material	src/parsing/parse_plane.c	/^static void	init_plane_material(t_object *plane)$/;"	f	typeref:typename:void	file:
init_scene	src/main.c	/^static void	init_scene(t_scene *scene)$/;"	f	typeref:typename:void	file:
init_sphere_material	src/parsing/parse_sphere.c	/^static void	init_sphere_material(t_object *sphere)$/;"	f	typeref:typename:void	file:
int_to_color	src/graphics/image.c	/^t_color	int_to_color(int color_int)$/;"	f	typeref:typename:t_color
intensity	includes/minirt.h	/^	double			intensity;$/;"	m	struct:s_light	typeref:typename:double
intersect_aabb_query	src/utils/aabb_intersections.c	/^int	intersect_aabb_query(t_aabb_query *q)$/;"	f	typeref:typename:int
intersect_bvh_iter	src/utils/bvh_intersections.c	/^int intersect_bvh_iter(t_ray ray, t_bvh_node *root, t_hit *hit)$/;"	f	typeref:typename:int
intersect_cone	src/math/intersect_cone.c	/^double	intersect_cone(t_ray ray, t_object *cone)$/;"	f	typeref:typename:double
intersect_cube	src/math/intersect_cube.c	/^double	intersect_cube(t_ray ray, t_object *cube)$/;"	f	typeref:typename:double
intersect_cylinder	src/math/intersect_cylinder.c	/^double	intersect_cylinder(t_ray ray, t_object *cylinder)$/;"	f	typeref:typename:double
intersect_plane	src/math/intersect_plane.c	/^double	intersect_plane(t_ray ray, t_object *plane)$/;"	f	typeref:typename:double
intersect_scene	src/math/intersections.c	/^int	intersect_scene(t_ray ray, t_scene *scene, t_hit *hit)$/;"	f	typeref:typename:int
intersect_scene_linear	src/math/intersections.c	/^int	intersect_scene_linear(t_ray ray, t_scene *scene, t_hit *hit)$/;"	f	typeref:typename:int
intersect_sphere	src/math/intersect_sphere.c	/^double	intersect_sphere(t_ray ray, t_object *sphere)$/;"	f	typeref:typename:double
is_empty_line	src/parsing/parse_scene.c	/^static int	is_empty_line(char *line)$/;"	f	typeref:typename:int	file:
is_in_shadow_with_dir	src/rendering/lighting.c	/^int	is_in_shadow_with_dir(t_vec3 point, t_vec3 dir_to_light, double light_distance, t_scene *sce/;"	f	typeref:typename:int
is_within_cone_height	src/math/intersect_cone.c	/^static int	is_within_cone_height(t_vec3 hit_point, t_object *cone)$/;"	f	typeref:typename:int	file:
is_within_cylinder_height	src/math/intersect_cylinder.c	/^static int	is_within_cylinder_height(t_vec3 hit_point, t_object *cylinder)$/;"	f	typeref:typename:int	file:
key_hook	minilibx-linux/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
key_param	minilibx-linux/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list	typeref:typename:void *
key_win1	minilibx-linux/test/main.c	/^int	key_win1(int key,void *p)$/;"	f	typeref:typename:int
key_win2	minilibx-linux/test/main.c	/^int	key_win2(int key,void *p)$/;"	f	typeref:typename:int
key_win3	minilibx-linux/test/main.c	/^int	key_win3(int key,void *p)$/;"	f	typeref:typename:int
left	includes/minirt.h	/^    struct s_bvh_node   *left;$/;"	m	struct:s_bvh_node	typeref:struct:s_bvh_node *
left	tests/test_cleanup_only.c	/^    struct s_bvh_node *left;$/;"	m	struct:s_bvh_node	typeref:struct:s_bvh_node *	file:
lights	includes/minirt.h	/^	t_light		*lights;$/;"	m	struct:s_scene	typeref:typename:t_light *
linear_to_srgb_channel	src/utils/colors.c	/^static inline double	linear_to_srgb_channel(double c)$/;"	f	typeref:typename:double	file:
local_endian	minilibx-linux/test/main.c	/^int	local_endian;$/;"	v	typeref:typename:int
log_error	minilibx-linux/configure	/^log_error(){$/;"	f
log_error	minilibx-linux/test/run_tests.sh	/^log_error(){$/;"	f
log_info	minilibx-linux/configure	/^log_info(){$/;"	f
log_info	minilibx-linux/test/run_tests.sh	/^log_info(){$/;"	f
logging	minilibx-linux/configure	/^logging(){$/;"	f
logging	minilibx-linux/test/run_tests.sh	/^logging(){$/;"	f
loop_hook	minilibx-linux/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar	typeref:typename:int (*)()
loop_param	minilibx-linux/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar	typeref:typename:void *
main	minilibx-linux/configure	/^main(){$/;"	f
main	minilibx-linux/test/main.c	/^int	main()$/;"	f	typeref:typename:int
main	minilibx-linux/test/new_win.c	/^int main()$/;"	f	typeref:typename:int
main	minilibx-linux/test/run_tests.sh	/^main(){$/;"	f
main	src/main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
main	tests/test_camera_ray.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_cleanup_only.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_cylinder.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_events.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_events_simple.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_integration.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_intersections.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_mlx_graphics.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_object_parsing.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_object_parsing_final.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_object_parsing_simple.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_parsing.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_parsing_comprehensive.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_parsing_simple.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_ray.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_scene_parsers.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_scene_parsers_simple.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_simple.c	/^int main(void)$/;"	f	typeref:typename:int
main	tests/test_vector.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_vector_raytracing.c	/^int	main(void)$/;"	f	typeref:typename:int
main	tests/test_visual_mlx.c	/^int	main(void)$/;"	f	typeref:typename:int
mask	minilibx-linux/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list	typeref:typename:int
material	includes/minirt.h	/^	t_material		material;$/;"	m	struct:s_object	typeref:typename:t_material
material	includes/minirt.h	/^	t_material	*material;$/;"	m	struct:s_hit	typeref:typename:t_material *
math.h	.vscode/settings.json	/^        "math.h": "c",$/;"	s	object:files.associations
max	includes/minirt.h	/^	t_vec3	max;$/;"	m	struct:s_aabb	typeref:typename:t_vec3
max	tests/test_cleanup_only.c	/^    t_vec3 max;$/;"	m	struct:s_aabb	typeref:typename:t_vec3	file:
min	includes/minirt.h	/^	t_vec3	min;$/;"	m	struct:s_aabb	typeref:typename:t_vec3
min	tests/test_cleanup_only.c	/^    t_vec3 min;$/;"	m	struct:s_aabb	typeref:typename:t_vec3	file:
minirt.h	.vscode/settings.json	/^        "minirt.h": "c",$/;"	s	object:files.associations
mlx	includes/minirt.h	/^	t_mlx	mlx;$/;"	m	struct:s_minirt	typeref:typename:t_mlx
mlx	minilibx-linux/test/main.c	/^void	*mlx;$/;"	v	typeref:typename:void *
mlx	minilibx-linux/test/new_win.c	/^void *mlx;$/;"	v	typeref:typename:void *
mlx_X_error	minilibx-linux/mlx_new_image.c	/^int	mlx_X_error;$/;"	v	typeref:typename:int
mlx_clear_window	minilibx-linux/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_col_name	minilibx-linux/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_destroy_display	minilibx-linux/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_destroy_image	minilibx-linux/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f	typeref:typename:int
mlx_destroy_window	minilibx-linux/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_do_key_autorepeatoff	minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeaton	minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_sync	minilibx-linux/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_expose_hook	minilibx-linux/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_ext_fullscreen	minilibx-linux/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f	typeref:typename:int
mlx_flush_event	minilibx-linux/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_get_color_value	minilibx-linux/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_get_data_addr	minilibx-linux/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f	typeref:typename:char *
mlx_get_screen_size	minilibx-linux/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f	typeref:typename:int
mlx_hook	minilibx-linux/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f	typeref:typename:int
mlx_init	minilibx-linux/mlx_init.c	/^void	*mlx_init()$/;"	f	typeref:typename:void *
mlx_int_anti_resize_win	minilibx-linux/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f	typeref:typename:int
mlx_int_deal_shm	minilibx-linux/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_do_nothing	minilibx-linux/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f	typeref:typename:int
mlx_int_egal_img	minilibx-linux/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	minilibx-linux/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:int
mlx_int_get_col_name	minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_good_color	minilibx-linux/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_int_get_line	minilibx-linux/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_text_rgb	minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_visual	minilibx-linux/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_new_image	minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f	typeref:typename:void *
mlx_int_new_xshm_image	minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f	typeref:typename:void *
mlx_int_param_ButtonPress	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_ButtonRelease	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_Expose	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyPress	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyRelease	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_MotionNotify	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_event	minilibx-linux/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v	typeref:typename:int (* ([]))()
mlx_int_param_generic	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_undef	minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f	typeref:typename:int
mlx_int_parse_xpm	minilibx-linux/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_rgb_conversion	minilibx-linux/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_set_win_event_mask	minilibx-linux/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_static_line	minilibx-linux/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_str_str	minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_to_wordtab	minilibx-linux/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_wait_first_expose	minilibx-linux/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f	typeref:typename:int
mlx_int_xpm_f_image	minilibx-linux/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f	typeref:typename:void *
mlx_int_xpm_set_pixel	minilibx-linux/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:int
mlx_key_hook	minilibx-linux/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_loop	minilibx-linux/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_end	minilibx-linux/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_hook	minilibx-linux/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_get_pos	minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f	typeref:typename:int
mlx_mouse_hide	minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_hook	minilibx-linux/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_move	minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f	typeref:typename:int
mlx_mouse_show	minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_new_image	minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_image2	minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_window	minilibx-linux/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f	typeref:typename:void *
mlx_pixel_put	minilibx-linux/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_ptr	includes/minirt.h	/^	void	*mlx_ptr;$/;"	m	struct:s_mlx	typeref:typename:void *
mlx_put_image_to_window	minilibx-linux/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f	typeref:typename:int
mlx_set_font	minilibx-linux/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f	typeref:typename:void
mlx_string_put	minilibx-linux/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_xpm_file_to_image	minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mouse_hook	minilibx-linux/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
mouse_param	minilibx-linux/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list	typeref:typename:void *
mouse_win1	minilibx-linux/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win2	minilibx-linux/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win3	minilibx-linux/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f	typeref:typename:int
move_camera	src/utils/camera.c	/^void	move_camera(t_camera *camera, t_vec3 direction, double distance)$/;"	f	typeref:typename:void
move_speed	includes/minirt.h	/^	double	move_speed;$/;"	m	struct:s_camera	typeref:typename:double
name	minilibx-linux/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name	typeref:typename:char *
name	minilibx-linux/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col	typeref:typename:int
next	includes/minirt.h	/^	struct s_light	*next;$/;"	m	struct:s_light	typeref:struct:s_light *
next	includes/minirt.h	/^	struct s_object	*next;$/;"	m	struct:s_object	typeref:struct:s_object *
next	minilibx-linux/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list *
normal	includes/minirt.h	/^	t_vec3			normal;$/;"	m	struct:s_object	typeref:typename:t_vec3
normal	includes/minirt.h	/^	t_vec3		normal;$/;"	m	struct:s_hit	typeref:typename:t_vec3
object	includes/minirt.h	/^	t_object	*object;$/;"	m	struct:s_hit	typeref:typename:t_object *
object	tests/test_cleanup_only.c	/^    void *object;$/;"	m	struct:s_bvh_node	typeref:typename:void *	file:
object_count	includes/minirt.h	/^    int                 object_count;$/;"	m	struct:s_bvh_node	typeref:typename:int
objects	includes/minirt.h	/^	t_object	*objects;$/;"	m	struct:s_scene	typeref:typename:t_object *
objects	includes/minirt.h	/^    t_object            **objects;$/;"	m	struct:s_bvh_node	typeref:typename:t_object **
origin	includes/minirt.h	/^	t_vec3	origin;$/;"	m	struct:s_aabb_query	typeref:typename:t_vec3
origin	includes/minirt.h	/^	t_vec3	origin;$/;"	m	struct:s_ray	typeref:typename:t_vec3
param	minilibx-linux/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list	typeref:typename:void *
parse_ambient	src/parsing/parse_camera.c	/^int	parse_ambient(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_args	minilibx-linux/configure	/^parse_args(){$/;"	f
parse_camera	src/parsing/parse_camera.c	/^int	parse_camera(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_color	src/parsing/parse_utils.c	/^int	parse_color(char *str, t_color *result)$/;"	f	typeref:typename:int
parse_cone	src/parsing/parse_cone.c	/^int	parse_cone(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_cone	tests/test_scene_parsers_simple.c	/^int parse_cone(char *line, t_scene *scene) { (void)line; (void)scene; return 0; }$/;"	f	typeref:typename:int
parse_cone_tokens	src/parsing/parse_cone.c	/^static int	parse_cone_tokens(char **tokens, t_vec3 *pos, t_vec3 *axis,$/;"	f	typeref:typename:int	file:
parse_cube	src/parsing/parse_cube.c	/^int	parse_cube(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_cube	tests/test_scene_parsers_simple.c	/^int parse_cube(char *line, t_scene *scene) { (void)line; (void)scene; return 0; }$/;"	f	typeref:typename:int
parse_cylinder	src/parsing/parse_cylinder.c	/^int	parse_cylinder(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_cylinder_tokens	src/parsing/parse_cylinder.c	/^static int	parse_cylinder_tokens(char **tokens, t_vec3 *pos, t_vec3 *axis,$/;"	f	typeref:typename:int	file:
parse_double	src/parsing/parse_utils.c	/^int	parse_double(char *str, double *result)$/;"	f	typeref:typename:int
parse_element_by_identifier	src/parsing/parse_scene.c	/^static int	parse_element_by_identifier(char *identifier, char *rest, t_scene *scene)$/;"	f	typeref:typename:int	file:
parse_int	src/parsing/parse_utils.c	/^int	parse_int(char *str, int *result)$/;"	f	typeref:typename:int
parse_light	src/parsing/parse_lights.c	/^int	parse_light(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_line	src/parsing/parse_scene.c	/^static int	parse_line(char *line, t_scene *scene, int line_num, char *filename)$/;"	f	typeref:typename:int	file:
parse_plane	src/parsing/parse_plane.c	/^int	parse_plane(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_scene	src/parsing/parse_scene.c	/^int	parse_scene(char *filename, t_scene *scene)$/;"	f	typeref:typename:int
parse_sphere	src/parsing/parse_sphere.c	/^int	parse_sphere(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_triangle	src/parsing/parse_triangle.c	/^int	parse_triangle(char *line, t_scene *scene)$/;"	f	typeref:typename:int
parse_vec3	src/parsing/parse_utils.c	/^int	parse_vec3(char *str, t_vec3 *result)$/;"	f	typeref:typename:int
partition	src/utils/bvh.c	/^static int partition(t_object **arr, int low, int high, int axis)$/;"	f	typeref:typename:int	file:
pitch_epsilon_helper	src/utils/camera.c	/^static void	pitch_epsilon_helper(t_camera *camera, double pitch)$/;"	f	typeref:typename:void	file:
pix	minilibx-linux/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img	typeref:typename:Pixmap
point	includes/minirt.h	/^	t_vec3		point;$/;"	m	struct:s_hit	typeref:typename:t_vec3
populate_hit_info	src/math/intersections.c	/^static void	populate_hit_info(t_hit *hit, double closest_t,$/;"	f	typeref:typename:void	file:
position	includes/minirt.h	/^	t_vec3			position;$/;"	m	struct:s_light	typeref:typename:t_vec3
position	includes/minirt.h	/^	t_vec3			position;$/;"	m	struct:s_object	typeref:typename:t_vec3
position	includes/minirt.h	/^	t_vec3	position;$/;"	m	struct:s_camera	typeref:typename:t_vec3
print_error	src/utils/error1.c	/^void	print_error(char *message)$/;"	f	typeref:typename:void
private_cmap	minilibx-linux/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar	typeref:typename:int
process_x_slab	src/math/intersect_cube.c	/^static t_slab_result	process_x_slab(t_ray ray, t_vec3 cube_min,$/;"	f	typeref:typename:t_slab_result	file:
process_y_slab	src/math/intersect_cube.c	/^static t_slab_result	process_y_slab(t_ray ray, t_vec3 cube_min,$/;"	f	typeref:typename:t_slab_result	file:
process_z_slab	src/math/intersect_cube.c	/^static t_slab_result	process_z_slab(t_ray ray, t_vec3 cube_min,$/;"	f	typeref:typename:t_slab_result	file:
profile	Makefile	/^profile: CFLAGS += $(PFLAGS)$/;"	t
profile	Makefile	/^profile: LIBS += $(PFLAGS)$/;"	t
profile	Makefile	/^profile: fclean $(MLX_DIR)\/libmlx.a $(NAME)$/;"	t
pshm_format	minilibx-linux/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar	typeref:typename:int
put_pixel	src/graphics/image.c	/^void	put_pixel(t_mlx *mlx, int x, int y, t_color color)$/;"	f	typeref:typename:void
quicksort_objects	src/utils/bvh.c	/^static void quicksort_objects(t_object **arr, int low, int high, int axis)$/;"	f	typeref:typename:void	file:
r	includes/minirt.h	/^	int	r;$/;"	m	struct:s_color	typeref:typename:int
radius	includes/minirt.h	/^	double			radius;$/;"	m	struct:s_object	typeref:typename:double
ray_at	src/math/ray.c	/^t_vec3	ray_at(t_ray ray, double t)$/;"	f	typeref:typename:t_vec3
ray_distance_to_point	src/math/ray.c	/^double	ray_distance_to_point(t_ray ray, t_vec3 point)$/;"	f	typeref:typename:double
ray_new	src/math/ray.c	/^t_ray	ray_new(t_vec3 origin, t_vec3 direction)$/;"	f	typeref:typename:t_ray
ray_reflect	src/math/ray.c	/^t_ray	ray_reflect(t_ray incident, t_vec3 hit_point, t_vec3 normal)$/;"	f	typeref:typename:t_ray
ray_transform	src/math/ray.c	/^t_ray	ray_transform(t_ray ray, t_vec3 translation)$/;"	f	typeref:typename:t_ray
raycast	src/rendering/raytracer.c	/^t_color	raycast(t_ray ray, t_scene *scene, int depth)$/;"	f	typeref:typename:t_color
re	Makefile	/^re: fclean all$/;"	t
re	minilibx-linux/Makefile	/^re	: clean all$/;"	t
re	minilibx-linux/test/Makefile.mk	/^re: clean all$/;"	t
read_file_line	src/parsing/parse_scene.c	/^static char	*read_file_line(int fd)$/;"	f	typeref:typename:char *	file:
reflection	includes/minirt.h	/^	double	reflection;$/;"	m	struct:s_material	typeref:typename:double
refraction_index	includes/minirt.h	/^	double	refraction_index;$/;"	m	struct:s_material	typeref:typename:double
render_all_pixels	src/rendering/raytracer.c	/^void	*render_all_pixels(void *intels)$/;"	f	typeref:typename:void *
render_pixel_adaptive	src/rendering/antialiasing.c	/^t_color	render_pixel_adaptive(t_minirt *rt, int x, int y)$/;"	f	typeref:typename:t_color
render_pixel_antialiased	src/rendering/antialiasing.c	/^t_color	render_pixel_antialiased(t_minirt *rt, int x, int y)$/;"	f	typeref:typename:t_color
render_pixel_at_coordinates	src/rendering/raytracer_utils.c	/^void	render_pixel_at_coordinates(t_minirt *rt, int x, int y,$/;"	f	typeref:typename:void
render_scene	src/rendering/raytracer.c	/^void	render_scene(t_minirt *rt)$/;"	f	typeref:typename:void
right	includes/minirt.h	/^	t_vec3	right;$/;"	m	struct:s_camera	typeref:typename:t_vec3
right	includes/minirt.h	/^    struct s_bvh_node   *right;$/;"	m	struct:s_bvh_node	typeref:struct:s_bvh_node *
right	tests/test_cleanup_only.c	/^    struct s_bvh_node *right;$/;"	m	struct:s_bvh_node	typeref:struct:s_bvh_node *	file:
root	minilibx-linux/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar	typeref:typename:Window
rotate_camera	src/utils/camera.c	/^void	rotate_camera(t_camera *camera, double yaw, double pitch)$/;"	f	typeref:typename:void
rotate_speed	includes/minirt.h	/^	double	rotate_speed;$/;"	m	struct:s_camera	typeref:typename:double
rt	src/rendering/raytracer.c	/^	t_minirt *rt;$/;"	m	struct:s_intels	typeref:typename:t_minirt *	file:
run_test	tests/run_tests.sh	/^run_test() {$/;"	f
s_aabb	includes/minirt.h	/^typedef struct s_aabb$/;"	s
s_aabb	tests/test_cleanup_only.c	/^typedef struct s_aabb$/;"	s	file:
s_aabb_query	includes/minirt.h	/^typedef struct s_aabb_query$/;"	s
s_bvh_node	includes/minirt.h	/^typedef struct s_bvh_node$/;"	s
s_bvh_node	tests/test_cleanup_only.c	/^typedef struct s_bvh_node$/;"	s	file:
s_camera	includes/minirt.h	/^typedef struct s_camera$/;"	s
s_col_name	minilibx-linux/mlx_int.h	/^struct	s_col_name$/;"	s
s_color	includes/minirt.h	/^typedef struct s_color$/;"	s
s_cone_params	includes/minirt.h	/^typedef struct s_cone_params$/;"	s
s_cylinder_params	includes/minirt.h	/^typedef struct s_cylinder_params$/;"	s
s_event_list	minilibx-linux/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_hit	includes/minirt.h	/^typedef struct s_hit$/;"	s
s_img	minilibx-linux/mlx_int.h	/^typedef struct	s_img$/;"	s
s_intels	src/rendering/raytracer.c	/^typedef struct s_intels$/;"	s	file:
s_light	includes/minirt.h	/^typedef struct s_light$/;"	s
s_material	includes/minirt.h	/^typedef struct s_material$/;"	s
s_minirt	includes/minirt.h	/^typedef struct s_minirt$/;"	s
s_mlx	includes/minirt.h	/^typedef struct s_mlx$/;"	s
s_object	includes/minirt.h	/^typedef struct s_object$/;"	s
s_ray	includes/minirt.h	/^typedef struct s_ray$/;"	s
s_scene	includes/minirt.h	/^typedef struct s_scene$/;"	s
s_slab_intersections	includes/minirt.h	/^typedef struct s_slab_intersections$/;"	s
s_slab_result	includes/minirt.h	/^typedef struct s_slab_result$/;"	s
s_vec3	includes/minirt.h	/^typedef struct s_vec3$/;"	s
s_vec3	tests/test_cleanup_only.c	/^typedef struct s_vec3$/;"	s	file:
s_win_list	minilibx-linux/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	minilibx-linux/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	minilibx-linux/mlx_int.h	/^typedef struct	s_xvar$/;"	s
safe_calloc	src/utils/memory.c	/^void	*safe_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
safe_free	src/utils/memory.c	/^void	safe_free(void **ptr)$/;"	f	typeref:typename:void
safe_free	tests/test_cleanup_only.c	/^void safe_free(void **ptr)$/;"	f	typeref:typename:void
safe_malloc	src/utils/memory.c	/^void	*safe_malloc(size_t size)$/;"	f	typeref:typename:void *
safe_malloc	tests/test_cleanup_only.c	/^void *safe_malloc(size_t size)$/;"	f	typeref:typename:void *
safe_realloc	src/utils/memory.c	/^void	*safe_realloc(void *ptr, size_t size)$/;"	f	typeref:typename:void *
safe_strdup	src/utils/memory.c	/^char	*safe_strdup(char *str)$/;"	f	typeref:typename:char *
sah_cost	src/utils/sah.c	/^static double	sah_cost(double left_area, double right_area,$/;"	f	typeref:typename:double	file:
saved_mode	minilibx-linux/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v	typeref:typename:RRMode
scene	includes/minirt.h	/^	t_scene	scene;$/;"	m	struct:s_minirt	typeref:typename:t_scene
screen	minilibx-linux/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar	typeref:typename:int
set_cylinder_properties	src/parsing/parse_cylinder.c	/^static void	set_cylinder_properties(t_object *cyl, t_vec3 pos, t_vec3 axis,$/;"	f	typeref:typename:void	file:
setup_camera	src/rendering/raytracer.c	/^void	setup_camera(t_camera *camera)$/;"	f	typeref:typename:void
setup_hooks	src/graphics/events.c	/^void	setup_hooks(t_minirt *rt)$/;"	f	typeref:typename:void
shm	minilibx-linux/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img	typeref:typename:XShmSegmentInfo
shm_att_pb	minilibx-linux/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f	typeref:typename:int
show	minilibx-linux/Makefile.mk	/^show:$/;"	t
show	minilibx-linux/test/Makefile.mk	/^show:$/;"	t
show_help	minilibx-linux/configure	/^show_help(){$/;"	f
sigint_handler	minilibx-linux/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	includes/minirt.h	/^	int		size_line;$/;"	m	struct:s_mlx	typeref:typename:int
size_line	minilibx-linux/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img	typeref:typename:int
skip_whitespace	src/parsing/parse_scene.c	/^static char	*skip_whitespace(char *str)$/;"	f	typeref:typename:char *	file:
skip_whitespace	src/parsing/parse_utils.c	/^static char	*skip_whitespace(char *str)$/;"	f	typeref:typename:char *	file:
sl1	minilibx-linux/test/main.c	/^int	sl1;$/;"	v	typeref:typename:int
sl2	minilibx-linux/test/main.c	/^int	sl2;$/;"	v	typeref:typename:int
sl3	minilibx-linux/test/main.c	/^int	sl3;$/;"	v	typeref:typename:int
sl4	minilibx-linux/test/main.c	/^int	sl4;$/;"	v	typeref:typename:int
solve_quadratic	src/math/intersect_sphere.c	/^static double	solve_quadratic(double a, double b, double c)$/;"	f	typeref:typename:double	file:
solve_quadratic_cone	src/math/intersect_cone.c	/^static double	solve_quadratic_cone(double a, double b, double c)$/;"	f	typeref:typename:double	file:
solve_quadratic_cylinder	src/math/intersect_cylinder.c	/^static double	solve_quadratic_cylinder(double a, double b, double c)$/;"	f	typeref:typename:double	file:
sort_objects_axis	src/utils/bvh.c	/^void sort_objects_axis(t_object **objects, int count, int axis)$/;"	f	typeref:typename:void
strlcpy_is_not_posix	minilibx-linux/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f	typeref:typename:unsigned int
swap	src/utils/aabb_intersections.c	/^static inline void	swap(double *t0, double *t1)$/;"	f	typeref:typename:void	file:
swap_objects	src/utils/bvh.c	/^static void swap_objects(t_object **a, t_object **b)$/;"	f	typeref:typename:void	file:
swap_values	src/math/cube_utils.c	/^void	swap_values(double *t1, double *t2)$/;"	f	typeref:typename:void
t	includes/minirt.h	/^	double		t;$/;"	m	struct:s_hit	typeref:typename:double
t1	includes/minirt.h	/^	double	t1;$/;"	m	struct:s_slab_intersections	typeref:typename:double
t2	includes/minirt.h	/^	double	t2;$/;"	m	struct:s_slab_intersections	typeref:typename:double
t_aabb	includes/minirt.h	/^}	t_aabb;$/;"	t	typeref:struct:s_aabb
t_aabb	tests/test_cleanup_only.c	/^} t_aabb;$/;"	t	typeref:struct:s_aabb	file:
t_aabb_query	includes/minirt.h	/^}	t_aabb_query;$/;"	t	typeref:struct:s_aabb_query
t_bvh_node	includes/minirt.h	/^}	t_bvh_node;$/;"	t	typeref:struct:s_bvh_node
t_bvh_node	tests/test_cleanup_only.c	/^} t_bvh_node;$/;"	t	typeref:struct:s_bvh_node	file:
t_camera	includes/minirt.h	/^}	t_camera;$/;"	t	typeref:struct:s_camera
t_color	includes/minirt.h	/^}	t_color;$/;"	t	typeref:struct:s_color
t_cone_params	includes/minirt.h	/^}	t_cone_params;$/;"	t	typeref:struct:s_cone_params
t_cylinder_params	includes/minirt.h	/^}	t_cylinder_params;$/;"	t	typeref:struct:s_cylinder_params
t_error	includes/minirt.h	/^}	t_error;$/;"	t	typeref:enum:e_error
t_event_list	minilibx-linux/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_hit	includes/minirt.h	/^}	t_hit;$/;"	t	typeref:struct:s_hit
t_img	minilibx-linux/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_intels	src/rendering/raytracer.c	/^}	t_intels;$/;"	t	typeref:struct:s_intels	file:
t_light	includes/minirt.h	/^}	t_light;$/;"	t	typeref:struct:s_light
t_material	includes/minirt.h	/^}	t_material;$/;"	t	typeref:struct:s_material
t_max	includes/minirt.h	/^	double	t_max;$/;"	m	struct:s_slab_result	typeref:typename:double
t_min	includes/minirt.h	/^	double	t_min;$/;"	m	struct:s_slab_result	typeref:typename:double
t_minirt	includes/minirt.h	/^}	t_minirt;$/;"	t	typeref:struct:s_minirt
t_mlx	includes/minirt.h	/^}	t_mlx;$/;"	t	typeref:struct:s_mlx
t_object	includes/minirt.h	/^}	t_object;$/;"	t	typeref:struct:s_object
t_ray	includes/minirt.h	/^}	t_ray;$/;"	t	typeref:struct:s_ray
t_scene	includes/minirt.h	/^}	t_scene;$/;"	t	typeref:struct:s_scene
t_slab_intersections	includes/minirt.h	/^}	t_slab_intersections;$/;"	t	typeref:struct:s_slab_intersections
t_slab_result	includes/minirt.h	/^}	t_slab_result;$/;"	t	typeref:struct:s_slab_result
t_vec3	includes/minirt.h	/^}	t_vec3;$/;"	t	typeref:struct:s_vec3
t_vec3	tests/test_cleanup_only.c	/^} t_vec3;$/;"	t	typeref:struct:s_vec3	file:
t_win_list	minilibx-linux/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	minilibx-linux/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	minilibx-linux/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
target_area	src/rendering/raytracer.c	/^void target_area(t_intels *intel,t_minirt *rt)$/;"	f	typeref:typename:void
test_all_object_types	tests/test_integration.c	/^void	test_all_object_types(void)$/;"	f	typeref:typename:void
test_camera_fov_effects	tests/test_camera_ray.c	/^void	test_camera_fov_effects(void)$/;"	f	typeref:typename:void
test_camera_vectors	tests/test_vector_raytracing.c	/^void	test_camera_vectors(void)$/;"	f	typeref:typename:void
test_close_handler	tests/test_visual_mlx.c	/^int	test_close_handler(t_mlx *mlx)$/;"	f	typeref:typename:int
test_color_conversion	tests/test_mlx_graphics.c	/^void	test_color_conversion(void)$/;"	f	typeref:typename:void
test_complete_scene_parsing	tests/test_scene_parsers.c	/^void test_complete_scene_parsing(void)$/;"	f	typeref:typename:void
test_complete_scene_parsing	tests/test_scene_parsers_simple.c	/^void test_complete_scene_parsing(void)$/;"	f	typeref:typename:void
test_cylinder_intersection_basic	tests/test_intersections.c	/^void	test_cylinder_intersection_basic(void)$/;"	f	typeref:typename:void
test_default_main	minilibx-linux/test/run_tests.sh	/^test_default_main(){$/;"	f
test_edge_cases	tests/test_object_parsing_final.c	/^void test_edge_cases(void)$/;"	f	typeref:typename:void
test_error_handling_integration	tests/test_integration.c	/^void	test_error_handling_integration(void)$/;"	f	typeref:typename:void
test_get_next_token	tests/test_parsing_comprehensive.c	/^void	test_get_next_token(void)$/;"	f	typeref:typename:void
test_intersect_scene	tests/test_intersections.c	/^void	test_intersect_scene(void)$/;"	f	typeref:typename:void
test_intersection_accuracy	tests/test_intersections.c	/^void	test_intersection_accuracy(void)$/;"	f	typeref:typename:void
test_intersection_performance	tests/test_intersections.c	/^void	test_intersection_performance(void)$/;"	f	typeref:typename:void
test_key_handler	tests/test_visual_mlx.c	/^int	test_key_handler(int keycode, t_mlx *mlx)$/;"	f	typeref:typename:int
test_lighting_scenarios	tests/test_integration.c	/^void	test_lighting_scenarios(void)$/;"	f	typeref:typename:void
test_memory_management	tests/test_integration.c	/^void	test_memory_management(void)$/;"	f	typeref:typename:void
test_mlx_init	tests/test_mlx_graphics.c	/^void	test_mlx_init(void)$/;"	f	typeref:typename:void
test_multiple_objects	tests/test_object_parsing.c	/^void test_multiple_objects(void)$/;"	f	typeref:typename:void
test_multiple_objects	tests/test_object_parsing_final.c	/^void test_multiple_objects(void)$/;"	f	typeref:typename:void
test_object_parsing	tests/test_parsing_comprehensive.c	/^void	test_object_parsing(void)$/;"	f	typeref:typename:void
test_object_validation	tests/test_object_parsing.c	/^void test_object_validation(void)$/;"	f	typeref:typename:void
test_object_validation	tests/test_object_parsing_final.c	/^void test_object_validation(void)$/;"	f	typeref:typename:void
test_parse_color	tests/test_parsing_comprehensive.c	/^void	test_parse_color(void)$/;"	f	typeref:typename:void
test_parse_cylinder	tests/test_object_parsing.c	/^void test_parse_cylinder(void)$/;"	f	typeref:typename:void
test_parse_cylinder	tests/test_object_parsing_final.c	/^void test_parse_cylinder(void)$/;"	f	typeref:typename:void
test_parse_double	tests/test_parsing_comprehensive.c	/^void	test_parse_double(void)$/;"	f	typeref:typename:void
test_parse_int	tests/test_parsing_comprehensive.c	/^void	test_parse_int(void)$/;"	f	typeref:typename:void
test_parse_plane	tests/test_object_parsing.c	/^void test_parse_plane(void)$/;"	f	typeref:typename:void
test_parse_plane	tests/test_object_parsing_final.c	/^void test_parse_plane(void)$/;"	f	typeref:typename:void
test_parse_sphere	tests/test_object_parsing.c	/^void test_parse_sphere(void)$/;"	f	typeref:typename:void
test_parse_sphere	tests/test_object_parsing_final.c	/^void test_parse_sphere(void)$/;"	f	typeref:typename:void
test_parse_vec3	tests/test_parsing_comprehensive.c	/^void	test_parse_vec3(void)$/;"	f	typeref:typename:void
test_parsing_error_cases	tests/test_parsing_comprehensive.c	/^void	test_parsing_error_cases(void)$/;"	f	typeref:typename:void
test_performance_complex_scene	tests/test_integration.c	/^void	test_performance_complex_scene(void)$/;"	f	typeref:typename:void
test_pixel_operations	tests/test_mlx_graphics.c	/^void	test_pixel_operations(void)$/;"	f	typeref:typename:void
test_plane_intersection_angled	tests/test_intersections.c	/^void	test_plane_intersection_angled(void)$/;"	f	typeref:typename:void
test_plane_intersection_basic	tests/test_intersections.c	/^void	test_plane_intersection_basic(void)$/;"	f	typeref:typename:void
test_ray_at	tests/test_ray.c	/^void	test_ray_at(void)$/;"	f	typeref:typename:void
test_ray_distance_to_point	tests/test_ray.c	/^void	test_ray_distance_to_point(void)$/;"	f	typeref:typename:void
test_ray_from_camera	tests/test_camera_ray.c	/^void	test_ray_from_camera(void)$/;"	f	typeref:typename:void
test_ray_new	tests/test_ray.c	/^void	test_ray_new(void)$/;"	f	typeref:typename:void
test_ray_reflect	tests/test_ray.c	/^void	test_ray_reflect(void)$/;"	f	typeref:typename:void
test_ray_tracing_scenarios	tests/test_ray.c	/^void	test_ray_tracing_scenarios(void)$/;"	f	typeref:typename:void
test_ray_transform	tests/test_ray.c	/^void	test_ray_transform(void)$/;"	f	typeref:typename:void
test_raytracing_scenarios	tests/test_vector_raytracing.c	/^void	test_raytracing_scenarios(void)$/;"	f	typeref:typename:void
test_rendering_pipeline	tests/test_integration.c	/^void	test_rendering_pipeline(void)$/;"	f	typeref:typename:void
test_scene_element_parsing	tests/test_parsing_comprehensive.c	/^void	test_scene_element_parsing(void)$/;"	f	typeref:typename:void
test_scene_parsing_integration	tests/test_integration.c	/^void	test_scene_parsing_integration(void)$/;"	f	typeref:typename:void
test_scene_validation	tests/test_parsing_comprehensive.c	/^void	test_scene_validation(void)$/;"	f	typeref:typename:void
test_slab_intersection	src/math/cube_utils.c	/^int	test_slab_intersection(double ray_dir, double ray_orig,$/;"	f	typeref:typename:int
test_sphere_intersection_basic	tests/test_intersections.c	/^void	test_sphere_intersection_basic(void)$/;"	f	typeref:typename:void
test_sphere_intersection_edge_cases	tests/test_intersections.c	/^void	test_sphere_intersection_edge_cases(void)$/;"	f	typeref:typename:void
test_vec3_add	tests/test_vector.c	/^void	test_vec3_add(void)$/;"	f	typeref:typename:void
test_vec3_cross	tests/test_vector.c	/^void	test_vec3_cross(void)$/;"	f	typeref:typename:void
test_vec3_div	tests/test_vector.c	/^void	test_vec3_div(void)$/;"	f	typeref:typename:void
test_vec3_dot	tests/test_vector.c	/^void	test_vec3_dot(void)$/;"	f	typeref:typename:void
test_vec3_length	tests/test_vector.c	/^void	test_vec3_length(void)$/;"	f	typeref:typename:void
test_vec3_length_squared	tests/test_vector.c	/^void	test_vec3_length_squared(void)$/;"	f	typeref:typename:void
test_vec3_mult	tests/test_vector.c	/^void	test_vec3_mult(void)$/;"	f	typeref:typename:void
test_vec3_new	tests/test_vector.c	/^void	test_vec3_new(void)$/;"	f	typeref:typename:void
test_vec3_normalize	tests/test_vector.c	/^void	test_vec3_normalize(void)$/;"	f	typeref:typename:void
test_vec3_sub	tests/test_vector.c	/^void	test_vec3_sub(void)$/;"	f	typeref:typename:void
tmax	includes/minirt.h	/^	double	tmax;$/;"	m	struct:s_aabb_query	typeref:typename:double
tmin	includes/minirt.h	/^	double	tmin;$/;"	m	struct:s_aabb_query	typeref:typename:double
transparency	includes/minirt.h	/^	double	transparency;$/;"	m	struct:s_material	typeref:typename:double
type	includes/minirt.h	/^	int				type;$/;"	m	struct:s_object	typeref:typename:int
type	minilibx-linux/mlx_int.h	/^	int				type;$/;"	m	struct:s_img	typeref:typename:int
up	includes/minirt.h	/^	t_vec3	up;$/;"	m	struct:s_camera	typeref:typename:t_vec3
update_camera_vectors	src/utils/camera.c	/^void	update_camera_vectors(t_camera *camera)$/;"	f	typeref:typename:void
update_closest_hit	src/math/intersections.c	/^static void	update_closest_hit(double t, t_object *current,$/;"	f	typeref:typename:void	file:
update_intersection_interval	src/math/cube_utils.c	/^t_slab_result	update_intersection_interval(t_slab_result prev,$/;"	f	typeref:typename:t_slab_result
use_xshm	minilibx-linux/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar	typeref:typename:int
utilities.h	.vscode/settings.json	/^        "utilities.h": "c",$/;"	s	object:files.associations
valid	includes/minirt.h	/^	int		valid;$/;"	m	struct:s_slab_result	typeref:typename:int
validate_arguments	src/parsing/validate_arguments.c	/^int	validate_arguments(int argc, char **argv)$/;"	f	typeref:typename:int
validate_cone_params	src/parsing/parse_cone.c	/^static int	validate_cone_params(double angle, double height, t_vec3 axis)$/;"	f	typeref:typename:int	file:
validate_cube_params	src/parsing/parse_cube.c	/^static int	validate_cube_params(double size)$/;"	f	typeref:typename:int	file:
validate_cylinder_params	src/parsing/parse_cylinder.c	/^static int	validate_cylinder_params(double diameter, double height, t_vec3 axis)$/;"	f	typeref:typename:int	file:
validate_file_access	src/parsing/validate_arguments.c	/^int	validate_file_access(char *filename)$/;"	f	typeref:typename:int
validate_file_extension	src/parsing/validate_arguments.c	/^int	validate_file_extension(char *filename)$/;"	f	typeref:typename:int
validate_plane_params	src/parsing/parse_plane.c	/^static int	validate_plane_params(t_vec3 normal)$/;"	f	typeref:typename:int	file:
validate_scene	src/utils/error.c	/^int	validate_scene(t_scene *scene)$/;"	f	typeref:typename:int
validate_scene_with_filename	src/parsing/parse_scene.c	/^static int	validate_scene_with_filename(t_scene *scene, char *filename)$/;"	f	typeref:typename:int	file:
validate_sphere_params	src/parsing/parse_sphere.c	/^static int	validate_sphere_params(double diameter)$/;"	f	typeref:typename:int	file:
variable_setup	src/utils/sah.c	/^static void	variable_setup(int *axis, int *best_axis, double *best_cost, \\$/;"	f	typeref:typename:void	file:
vec3_add	src/math/vector1.c	/^t_vec3	vec3_add(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:t_vec3
vec3_cross	src/math/vector.c	/^t_vec3	vec3_cross(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:t_vec3
vec3_div	src/math/vector1.c	/^t_vec3	vec3_div(t_vec3 v, double scalar)$/;"	f	typeref:typename:t_vec3
vec3_dot	src/math/vector.c	/^double	vec3_dot(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:double
vec3_equals	tests/test_camera_ray.c	/^int	vec3_equals(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:int
vec3_equals	tests/test_parsing_comprehensive.c	/^int	vec3_equals(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:int
vec3_equals	tests/test_ray.c	/^int	vec3_equals(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:int
vec3_equals	tests/test_vector.c	/^int	vec3_equals(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:int
vec3_equals	tests/test_vector_raytracing.c	/^int	vec3_equals(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:int
vec3_length	src/math/vector.c	/^double	vec3_length(t_vec3 v)$/;"	f	typeref:typename:double
vec3_length_squared	src/math/vector.c	/^double	vec3_length_squared(t_vec3 v)$/;"	f	typeref:typename:double
vec3_mult	src/math/vector1.c	/^t_vec3	vec3_mult(t_vec3 v, double scalar)$/;"	f	typeref:typename:t_vec3
vec3_new	src/math/vector1.c	/^t_vec3	vec3_new(double x, double y, double z)$/;"	f	typeref:typename:t_vec3
vec3_normalize	src/math/vector.c	/^t_vec3	vec3_normalize(t_vec3 v)$/;"	f	typeref:typename:t_vec3
vec3_sub	src/math/vector1.c	/^t_vec3	vec3_sub(t_vec3 a, t_vec3 b)$/;"	f	typeref:typename:t_vec3
visual	minilibx-linux/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar	typeref:typename:Visual *
width	includes/minirt.h	/^	int		width;$/;"	m	struct:s_mlx	typeref:typename:int
width	minilibx-linux/mlx_int.h	/^	int				width;$/;"	m	struct:s_img	typeref:typename:int
win1	minilibx-linux/test/main.c	/^void	*win1;$/;"	v	typeref:typename:void *
win1	minilibx-linux/test/new_win.c	/^void *win1;$/;"	v	typeref:typename:void *
win2	minilibx-linux/test/main.c	/^void    *win2;$/;"	v	typeref:typename:void *
win2	minilibx-linux/test/new_win.c	/^void *win2;$/;"	v	typeref:typename:void *
win3	minilibx-linux/test/main.c	/^void    *win3;$/;"	v	typeref:typename:void *
win_count	minilibx-linux/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	typeref:typename:int	file:
win_list	minilibx-linux/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar	typeref:typename:t_win_list *
win_ptr	includes/minirt.h	/^	void	*win_ptr;$/;"	m	struct:s_mlx	typeref:typename:void *
window	minilibx-linux/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list	typeref:typename:Window
wm_delete_window	minilibx-linux/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar	typeref:typename:Atom
wm_protocols	minilibx-linux/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar	typeref:typename:Atom
x	includes/minirt.h	/^	double	x;$/;"	m	struct:s_vec3	typeref:typename:double
x	tests/test_cleanup_only.c	/^    double x;$/;"	m	struct:s_vec3	typeref:typename:double	file:
xend	src/rendering/raytracer.c	/^	int xend;$/;"	m	struct:s_intels	typeref:typename:int	file:
xpm1_x	minilibx-linux/test/main.c	/^int	xpm1_x;$/;"	v	typeref:typename:int
xpm1_y	minilibx-linux/test/main.c	/^int	xpm1_y;$/;"	v	typeref:typename:int
xstart	src/rendering/raytracer.c	/^	int xstart;$/;"	m	struct:s_intels	typeref:typename:int	file:
y	includes/minirt.h	/^	double	y;$/;"	m	struct:s_vec3	typeref:typename:double
y	tests/test_cleanup_only.c	/^    double y;$/;"	m	struct:s_vec3	typeref:typename:double	file:
yaw_epsilon_helper	src/utils/camera.c	/^static void	yaw_epsilon_helper(t_camera *camera, double yaw)$/;"	f	typeref:typename:void	file:
yend	src/rendering/raytracer.c	/^	int yend;$/;"	m	struct:s_intels	typeref:typename:int	file:
ystart	src/rendering/raytracer.c	/^	int ystart;$/;"	m	struct:s_intels	typeref:typename:int	file:
z	includes/minirt.h	/^	double	z;$/;"	m	struct:s_vec3	typeref:typename:double
z	tests/test_cleanup_only.c	/^    double z;$/;"	m	struct:s_vec3	typeref:typename:double	file:
zoom_camera	src/graphics/events.c	/^void	zoom_camera(t_camera *cam, double factor)$/;"	f	typeref:typename:void
